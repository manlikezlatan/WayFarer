{"version":3,"sources":["../../api/controllers/bookingController.js"],"names":["Bookings","createBooking","req","res","body","trip_id","bus_id","trip_date","seat_number","user","first_name","last_name","user_id","email","status","json","error","createBookingQuery","values","db","query","rows","data","message","routine","getAllBookings","is_admin","getAllBookingsQuery","undefined","deleteBooking","bookingId","params","deleteBookingQuery","console","log","updateSeat","getBookingQuery","updateBookingSeat","booking_id","result"],"mappings":"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","sourcesContent":["import db from '../models/query';\r\n\r\nconst Bookings = {\r\n\r\n  /**\r\n     * Book a trip\r\n     * @param {object} req\r\n     * @param {object} res\r\n     * @returns {object} Bookings object\r\n     */\r\n  async createBooking(req, res) {\r\n    const {\r\n      trip_id, bus_id, trip_date, seat_number\r\n    } = req.body;\r\n\r\n    const {\r\n      first_name, last_name, user_id, email,\r\n    } = req.user;\r\n\r\n    if (!trip_id) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Kindly enter a correct trip ID'\r\n      });\r\n    }\r\n    const createBookingQuery = `INSERT INTO\r\n        bookings(user_id, trip_id, bus_id, trip_date, seat_number, first_name, last_name, email)\r\n        VALUES($1, $2, $3, $4, $5, $6, $7, $8)\r\n        returning *`;\r\n    const values = [\r\n      user_id,\r\n      trip_id,\r\n      bus_id,\r\n      trip_date,\r\n      seat_number,\r\n      first_name,\r\n      last_name,\r\n      email,\r\n    ];\r\n    try {\r\n      const { rows } = await db.query(createBookingQuery, values);\r\n      const data = rows[0];\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'Booking successfully created',\r\n        data\r\n      });\r\n    } catch (error) {\r\n      if (error.routine === '_bt_check_unique') {\r\n        return res.status(409).json({\r\n          status: 'error',\r\n          error: 'Your preferred seat is taken already, kindly choose another'\r\n        });\r\n      }\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'An error occured. Kindly try again with correct trip details'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n     * Get All Bookings\r\n     * @param {object} req\r\n     * @param {object} res\r\n     * @returns {object} returns bookings\r\n     */\r\n\r\n  async getAllBookings(req, res) {\r\n    const { is_admin, user_id } = req.user;\r\n    if (!is_admin === true) {\r\n      const getAllBookingsQuery = 'SELECT * FROM bookings WHERE user_id = $1';\r\n      try {\r\n        const { rows } = await db.query(getAllBookingsQuery, [user_id]);\r\n        if (rows[0] === undefined) {\r\n          return res.status(404).json({\r\n            status: 'error',\r\n            error: 'you have no bookings at the moment'\r\n          });\r\n        }\r\n        const data = rows;\r\n        return res.status(200).json({\r\n          status: 'success',\r\n          data\r\n        });\r\n      } catch (error) {\r\n        return res.status(500).json({\r\n          status: 'error',\r\n          error: 'An error occured. Please try again later'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Admin can view all bookings\r\n    const getAllBookingsQuery = 'SELECT * FROM bookings ORDER BY booking_id ASC';\r\n    try {\r\n      const { rows } = await db.query(getAllBookingsQuery);\r\n      if (rows[0] === undefined) {\r\n        return res.status(404).json({\r\n          status: 'error',\r\n          error: 'There are currently no bookings'\r\n        });\r\n      }\r\n      const data = rows;\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'Sorry, an error occured. Please try again later'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Delete booking\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {void} returns booking deleted\r\n   */\r\n  async deleteBooking(req, res) {\r\n    const { bookingId } = req.params;\r\n    const { user_id } = req.user;\r\n    const deleteBookingQuery = 'DELETE FROM bookings WHERE booking_id = $1 AND user_id = $2 returning *';\r\n    try {\r\n      const { rows } = await db.query(deleteBookingQuery, [bookingId, user_id]);\r\n      console.log(rows);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({\r\n          status: 'error',\r\n          error: 'You have no booking with the specified booking ID'\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Your booking was deleted successfully',\r\n        data: {}\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'Sorry, an error occured. Try again later'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n * Update seat number on a booking\r\n * @param {object} req \r\n * @param {object} res \r\n * @returns {object} updated user\r\n */\r\n  async updateSeat(req, res) {\r\n    const { bookingId } = req.params;\r\n    const { seat_number } = req.body;\r\n\r\n    const { user_id } = req.user;\r\n\r\n    if (!seat_number) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Choose a seat number'\r\n      });\r\n    }\r\n    const getBookingQuery = 'SELECT * FROM booking WHERE booking_id=$1';\r\n    const updateBookingSeat = `UPDATE bookings\r\n        SET seat_number=$1 WHERE user_id=$2 AND booking_id=$3 returning *`;\r\n    try {\r\n      const { rows } = await db.query(getBookingQuery, [bookingId]);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({\r\n          status: 'error',\r\n          error: 'This booking cannot be found'\r\n        });\r\n      }\r\n      const values = [\r\n        seat_number,\r\n        user_id,\r\n        booking_id,\r\n      ];\r\n      const result = await db.query(updateBookingSeat, values);\r\n      const data = result.rows[0];\r\n      delete data.seat_number;\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Booking updated successfully',\r\n        data\r\n      });\r\n    } catch (error) {\r\n      if (error.routine === '_bt_check_unique') {\r\n        return res.status(409).json({\r\n          status: 'error',\r\n          error: 'Your preferred seat number is already taken. Kindly choose another.'\r\n        });\r\n      }\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'An error occured'\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Bookings;\r\n"],"file":"bookingController.js"}
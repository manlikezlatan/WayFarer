{"version":3,"sources":["../../api/controllers/busController.js"],"names":["Buses","addBusDetails","req","res","body","number_plate","manufacturer","model","year","capacity","is_admin","user","status","json","error","createBusQuery","values","db","query","rows","data","message","getAllBuses","getAllBusQuery"],"mappings":"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","sourcesContent":["import db from '../models/query';\r\n\r\nconst Buses = {\r\n  /**\r\n     * Add A Bus\r\n     * @param {object} req\r\n     * @param {object} res\r\n     * @returns {object} Bus object\r\n     */\r\n\r\n  async addBusDetails(req, res) {\r\n    const {\r\n      number_plate, manufacturer, model, year, capacity\r\n    } = req.body;\r\n\r\n    const { is_admin } = req.user;\r\n\r\n    if (!is_admin === true) {\r\n      return res.status(401).json({\r\n        status: 'error',\r\n        error: 'Sorry, you are not authorized to edit or add a bus details'\r\n      });\r\n    }\r\n    if (!number_plate || !manufacturer || !model || !year || !capacity) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Kindly fill the required fields'\r\n      });\r\n    }\r\n    const createBusQuery = `INSERT INTO\r\n        buses(number_plate, manufacturer, model, year, capacity)\r\n        VALUES($1, $2, $3, $4, $5)\r\n        returning *`;\r\n    const values = [\r\n      number_plate,\r\n      manufacturer,\r\n      model,\r\n      year,\r\n      capacity,\r\n    ];\r\n\r\n    try {\r\n      const { rows } = await db.query(createBusQuery, values);\r\n      const data = rows[0];\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'Bus added successfully',\r\n        data\r\n      });\r\n    } catch (error) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Unable to add bus'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n     * Get All Buses\r\n     * @param {object} req\r\n     * @param {object} res\r\n     * @returns {object} buses array\r\n     */\r\n  async getAllBuses(req, res) {\r\n    const { is_admin } = req.user;\r\n\r\n    if (!is_admin === true) {\r\n      return res.status(401).json({\r\n        status: 'error',\r\n        error: 'Sorry You are unauthorized to view all buses'\r\n      });\r\n    }\r\n    const getAllBusQuery = 'SELECT * FROM buses ORDER BY bus_id ASC';\r\n    try {\r\n      const { rows } = await db.query(getAllBusQuery);\r\n      const data = rows;\r\n      if (!rows) {\r\n        return res.status(400).json({\r\n          status: 'error',\r\n          error: 'There are currently no buses'\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'An error occured. Try again later'\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Buses;\r\n"],"file":"busController.js"}
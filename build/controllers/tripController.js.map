{"version":3,"sources":["../../api/controllers/tripController.js"],"names":["Trips","createTrip","req","res","body","bus_id","origin","destination","trip_date","fare","is_admin","user","status","json","error","createtripQuery","values","db","query","rows","data","message","cancelTrip","tripId","params","console","log","deleteTripQuery","getAllTrips","getAllTripsQuery"],"mappings":"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","sourcesContent":["import db from '../models/query';\r\n\r\nconst Trips = {\r\n  /**\r\n     * Create a Trip\r\n     * @param {object} req\r\n     * @param {object} res\r\n     * @returns {object} Trips object\r\n     */\r\n\r\n  async createTrip(req, res) {\r\n    const {\r\n      bus_id, origin, destination, trip_date, fare\r\n    } = req.body;\r\n\r\n    const { is_admin } = req.user;\r\n\r\n    if (!is_admin === true) {\r\n      return res.status(401).json({\r\n        status: 'error',\r\n        error: 'Sorry, you are not authorized to create a trip'\r\n      });\r\n    }\r\n    if (!bus_id || !origin || !destination || !trip_date || !fare) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Kindly fill the all required details for the trip'\r\n      });\r\n    }\r\n    const createtripQuery = `INSERT INTO \r\n        trips(bus_id, origin, destination, trip_date, fare)\r\n        VALUES($1, $2, $3, $4, $5)\r\n        returning *`;\r\n    const values = [\r\n      bus_id,\r\n      origin,\r\n      destination,\r\n      trip_date,\r\n      fare\r\n    ];\r\n    try {\r\n      const { rows } = await db.query(createtripQuery, values);\r\n      const data = rows[0];\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'Trip created successfully.',\r\n        data\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'Unable to create trip'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * cancel A Trip\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {void} return trip cancelled successfully\r\n   */\r\n  async cancelTrip(req, res) {\r\n    const { tripId } = req.params;\r\n    const { is_admin } = req.user;\r\n\r\n    console.log(req.params);\r\n\r\n    if (!is_admin === true) {\r\n      return res.status(401).json({\r\n        status: 'error',\r\n        error: 'Sorry, you are not authorized to cancel a trip'\r\n      });\r\n    }\r\n    const deleteTripQuery = 'DELETE FROM trips WHERE trip_id=$1 returning *';\r\n    try {\r\n      const { rows } = await db.query(deleteTripQuery, [tripId]);\r\n      console.log(rows);\r\n      if (!rows[0]) {\r\n        return res.status(400).json({\r\n          status: 'error',\r\n          error: 'There is no trip with that id'\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        message: 'Trip cancelled successfully',\r\n        data: {}\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'An error has occured, try again later'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get All Trips\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} trips array\r\n   */\r\n  async getAllTrips(req, res) {\r\n    const getAllTripsQuery = 'SELECT * FROM trips ORDER BY trip_id ASC';\r\n    try {\r\n      const { rows } = await db.query(getAllTripsQuery);\r\n      const data = rows;\r\n      if (!rows[0]) {\r\n        return res.status(404).json({\r\n          status: 'error',\r\n          error: 'There are currently no trips'\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'An error occured, please try again later'\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Trips;\r\n"],"file":"tripController.js"}
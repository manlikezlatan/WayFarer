{"version":3,"sources":["../../api/controllers/userController.js"],"names":["Users","signup","req","res","body","email","password","first_name","last_name","status","json","error","Helper","isValidEmail","validatePassword","hashedPassword","hashPassword","createQuery","values","db","query","rows","id","user_id","is_admin","token","generateToken","message","data","routine","AdminSignup","createAdminQuery","userId","signin","signinQuery","comparePassword"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\r\nimport db from '../models/query';\r\nimport Helper from '../services/helpers';\r\n\r\nconst Users = {\r\n  /**\r\n   * Create A User\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} User object\r\n   */\r\n\r\n  async signup(req, res) {\r\n    const {\r\n      email, password, first_name, last_name\r\n    } = req.body;\r\n    if (!email || !password || !first_name || !last_name) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Kindly fill your complete details'\r\n      });\r\n    }\r\n    if (!Helper.isValidEmail(email)) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Please enter a valid email address'\r\n      });\r\n    }\r\n    if (!Helper.validatePassword(password)) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Please enter a valid password with more than eight(8) characters'\r\n      });\r\n    }\r\n\r\n    const hashedPassword = Helper.hashPassword(password);\r\n\r\n    const createQuery = `INSERT INTO\r\n      users(email, first_name, last_name, password)\r\n      VALUES($1, $2, $3, $4)\r\n      returning *`;\r\n    const values = [email, first_name, last_name, hashedPassword];\r\n\r\n    try {\r\n      const { rows } = await db.query(createQuery, values);\r\n      const id = rows[0].user_id;\r\n      const is_admin = rows[0].is_admin;\r\n      const token = Helper.generateToken(id);\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'Account created successfully',\r\n        data: {\r\n          id,\r\n          is_admin,\r\n          token\r\n        }\r\n      });\r\n    } catch (error) {\r\n      if (error.routine === '_bt_check_unique') {\r\n        return res.status(409).json({\r\n          status: 'error',\r\n          error: 'User with that email already exist'\r\n        });\r\n      }\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'Request failed. Try again later.'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n    * Admin Sign Up\r\n    * @param {object} req\r\n    * @param {object} res\r\n    * @returns {object} Admin object\r\n    */\r\n\r\n  async AdminSignup(req, res) {\r\n    const {\r\n      email, first_name, last_name, password, is_admin\r\n    } = req.body;\r\n\r\n    if (!is_admin === true) {\r\n      return res.status(401).json({\r\n        status: 'error',\r\n        error: 'Unauthorized'\r\n      });\r\n    }\r\n\r\n    if (!email || !first_name || !last_name || !password) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Email, password, first name and last name are required'\r\n      });\r\n    }\r\n    if (!Helper.isValidEmail(email)) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Please enter a valid email address'\r\n      });\r\n    }\r\n    if (!Helper.validatePassword(password)) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Please enter a valid password with more than eight(8) characters'\r\n      });\r\n    }\r\n    const hashedPassword = Helper.hashPassword(password);\r\n    const createAdminQuery = `INSERT INTO\r\n      users(email, first_name, last_name, password, is_admin)\r\n      VALUES($1, $2, $3, $4, $5)\r\n      returning *`;\r\n    const values = [\r\n      email,\r\n      first_name,\r\n      last_name,\r\n      hashedPassword,\r\n      is_admin,\r\n    ];\r\n\r\n    try {\r\n      const { rows } = await db.query(createAdminQuery, values);\r\n      delete rows[0].password;\r\n      const userId = rows[0].user_id;\r\n      const token = Helper.generateToken(rows[0].user_id);\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        message: 'An admin has been created successfully',\r\n        data: {\r\n          userId,\r\n          token\r\n        }\r\n      });\r\n    } catch (error) {\r\n      if (error.routine === '_bt_check_unique') {\r\n        return res.status(409).json({\r\n          status: 'error',\r\n          error: 'Admin with that email already exist'\r\n        });\r\n      }\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Request failed. Try again later.'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * User Sign in\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} User object\r\n   */\r\n\r\n  async signin(req, res) {\r\n    const { email, password } = req.body;\r\n    if (!email || !password) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Please enter your email and password'\r\n      });\r\n    }\r\n    if (!Helper.isValidEmail(email)) {\r\n      return res.status(400).json({\r\n        status: 'error',\r\n        error: 'Please enter a valid email address'\r\n      });\r\n    }\r\n    const signinQuery = 'SELECT * FROM users WHERE email = $1';\r\n    try {\r\n      const { rows } = await db.query(signinQuery, [email]);\r\n      if (!rows[0]) {\r\n        return res.status(400).json({\r\n          status: 'error',\r\n          error: 'The email or password you provided is incorrect'\r\n        });\r\n      }\r\n      if (!Helper.comparePassword(rows[0].password, password)) {\r\n        return res.status(400).json({\r\n          status: 'error',\r\n          error: 'The password you provided is incorrect'\r\n        });\r\n      }\r\n      const token = Helper.generateToken(rows[0].user_id);\r\n      const id = rows[0].user_id;\r\n      const is_admin = rows[0].is_admin;\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n          id,\r\n          is_admin,\r\n          token\r\n        }\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 'error',\r\n        error: 'Unable to process request'\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Users;\r\n"],"file":"userController.js"}
{"version":3,"sources":["../../api/models/db.js"],"names":["require","Pool","dotenv","config","dbConfig","connectionString","process","env","DATABASE_URL","pool","on","console","log","createUsersTable","userCreateQuery","query","then","res","end","err","createBusesTable","createTripsTable","tripsCreateQuery","createBookingsTable","bookingCreateQuery","dropUsersTable","usersDropQuery","dropBusesTable","busesDropQuery","dropTripsTable","tripsDropQuery","dropBookingsTable","bookingsDropQuery","createAllTables","dropAllTables","exit","module","exports"],"mappings":"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","sourcesContent":["const { Pool } = require('pg');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst dbConfig = { connectionString: process.env.DATABASE_URL };\nconst pool = new Pool(dbConfig);\n\npool.on('connect', () => {\n  console.log('connected to wayfarer database');\n});\n\n/**\n * Create Users Table\n */\nconst createUsersTable = () => {\n  const userCreateQuery = `CREATE TABLE IF NOT EXISTS users\n    (user_id BIGSERIAL PRIMARY KEY, \n    email VARCHAR(100) UNIQUE NOT NULL, \n    first_name VARCHAR(100), \n    last_name VARCHAR(100), \n    password VARCHAR(100) NOT NULL,\n    is_admin BOOLEAN DEFAULT(false),\n    created_on TIMESTAMP DEFAULT current_timestamp NOT NULL)`;\n\n  pool.query(userCreateQuery)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Create Buses Table\n */\nconst createBusesTable = () => {\n  const userCreateQuery = `CREATE TABLE IF NOT EXISTS buses\n    (bus_id BIGSERIAL PRIMARY KEY, \n    number_plate VARCHAR(100) NOT NULL,\n    manufacturer VARCHAR(100) NOT NULL,\n    model VARCHAR(100) NOT NULL,\n    year VARCHAR(10) NOT NULL,\n    capacity BIGINT DEFAULT 0 NOT NULL,\n    created_on TIMESTAMP DEFAULT current_timestamp NOT NULL)`;\n\n  pool.query(userCreateQuery)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Create Trips Table\n */\nconst createTripsTable = () => {\n  const tripsCreateQuery = `CREATE TABLE IF NOT EXISTS trips \n    (trip_id BIGSERIAL PRIMARY KEY,\n    bus_id BIGINT REFERENCES buses(bus_id) NOT NULL,\n    origin VARCHAR(255) NOT NULL,\n    destination VARCHAR(255) NOT NULL,\n    trip_date DATE NOT NULL,\n    fare FLOAT NOT NULL,\n    status FLOAT DEFAULT(1.00)\n  )`;\n\n  pool.query(tripsCreateQuery)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Create Bookings Table\n */\nconst createBookingsTable = () => {\n  const bookingCreateQuery = `CREATE TABLE IF NOT EXISTS bookings\n  (booking_id BIGSERIAL NOT NULL, \n    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE, \n    trip_id INTEGER REFERENCES trips(trip_id) ON DELETE CASCADE, \n    bus_id INTEGER REFERENCES buses(bus_id) ON DELETE CASCADE, \n    trip_date DATE NOT NULL, seat_number INTEGER UNIQUE, \n    first_name VARCHAR(100) NOT NULL, \n    last_name VARCHAR(100) NOT NULL, \n    email VARCHAR(100) NOT NULL, \n    created_on TIMESTAMP DEFAULT current_timestamp NOT NULL, \n    PRIMARY KEY(trip_id, user_id)\n  )`;\n\n  pool.query(bookingCreateQuery)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Drop Users Table\n */\nconst dropUsersTable = () => {\n  const usersDropQuery = 'DROP TABLE IF EXISTS users';\n  pool.query(usersDropQuery)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Drop Buses Table\n */\nconst dropBusesTable = () => {\n  const busesDropQuery = 'DROP TABLE IF EXISTS buses';\n  pool.query(busesDropQuery)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Drop Trips Table\n */\nconst dropTripsTable = () => {\n  const tripsDropQuery = 'DROP TABLE IF EXISTS trips';\n  pool.query(tripsDropQuery)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n/**\n * Drop Bookings Table\n */\nconst dropBookingsTable = () => {\n  const bookingsDropQuery = 'DROP TABLE IF EXISTS bookings';\n  pool.query(bookingsDropQuery)\n    .then((res) => {\n      console.log(res);\n      pool.end();\n    })\n    .catch((err) => {\n      console.log(err);\n      pool.end();\n    });\n};\n\n\n/**\n * Create All Tables\n */\nconst createAllTables = () => {\n  createUsersTable();\n  createBusesTable();\n  createTripsTable();\n  createBookingsTable();\n};\n\n/**\n * Drop All Tables\n */\nconst dropAllTables = () => {\n  dropUsersTable();\n  dropBusesTable();\n  dropTripsTable();\n  dropBookingsTable();\n};\n\npool.on('remove', () => {\n  console.log('client removed');\n  process.exit(0);\n});\n\nmodule.exports = {\n  createAllTables,\n  dropAllTables\n};\n\nrequire('make-runnable');\n"],"file":"db.js"}
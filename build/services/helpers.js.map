{"version":3,"sources":["../../api/services/helpers.js"],"names":["Helper","hashPassword","password","bcrypt","hashSync","genSaltSync","validatePassword","length","test","comparePassword","compareSync","isValidEmail","email","isEmpty","input","undefined","replace","empty","generateToken","id","token","jwt","sign","userId","process","env","SECRET","expiresIn"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,MAAM,GAAG;AACb;;;;;AAKAC,EAAAA,YANa,wBAMAC,QANA,EAMU;AACrB,WAAOC,mBAAOC,QAAP,CAAgBF,QAAhB,EAA0BC,mBAAOE,WAAP,CAAmB,CAAnB,CAA1B,CAAP;AACD,GARY;;AAUb;;;;;AAKAC,EAAAA,gBAfa,4BAeIJ,QAfJ,EAec;AACzB,QAAIA,QAAQ,CAACK,MAAT,IAAmB,CAAnB,IAAwBL,QAAQ,KAAK,EAArC,IAA2C,KAAKM,IAAL,CAAUN,QAAV,MAAwB,IAAvE,EAA6E;AAC3E,aAAO,KAAP;AACD;;AAAC,WAAO,IAAP;AACH,GAnBY;;AAqBb;;;;;;AAMAO,EAAAA,eA3Ba,2BA2BGR,YA3BH,EA2BiBC,QA3BjB,EA2B2B;AACtC,WAAOC,mBAAOO,WAAP,CAAmBR,QAAnB,EAA6BD,YAA7B,CAAP;AACD,GA7BY;;AA8Bb;;;;;AAKAU,EAAAA,YAnCa,wBAmCAC,KAnCA,EAmCO;AAClB,WAAO,eAAeJ,IAAf,CAAoBI,KAApB,CAAP;AACD,GArCY;;AAsCb;;;;;AAKAC,EAAAA,OA3Ca,mBA2CLC,KA3CK,EA2CE;AACb,QAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,EAArC,EAAyC;AACvC,aAAO,IAAP;AACD;;AACD,QAAIA,KAAK,CAACE,OAAN,CAAc,KAAd,EAAqB,EAArB,EAAyBT,MAA7B,EAAqC;AACnC,aAAO,KAAP;AACD;;AAAC,WAAO,IAAP;AACH,GAlDY;;AAoDb;;;;;AAKAU,EAAAA,KAzDa,iBAyDPH,KAzDO,EAyDA;AACX,QAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,EAArC,EAAyC;AACvC,aAAO,IAAP;AACD;AACF,GA7DY;;AA+Db;;;;;AAKAI,EAAAA,aApEa,yBAoECC,EApED,EAoEK;AAChB,QAAMC,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AACrBC,MAAAA,MAAM,EAAEJ;AADa,KAAT,EAGdK,OAAO,CAACC,GAAR,CAAYC,MAHE,EAGM;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAHN,CAAd;;AAIA,WAAOP,KAAP;AACD;AA1EY,CAAf;eA6EepB,M","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst Helper = {\r\n  /**\r\n   * Hash Password Method\r\n   * @param {string} password\r\n   * @returns {string} returns hashed password\r\n   */\r\n  hashPassword(password) {\r\n    return bcrypt.hashSync(password, bcrypt.genSaltSync(8));\r\n  },\r\n\r\n  /**\r\n   * validatePassword helper method\r\n   * @param {string} password\r\n   * @returns {Boolean} True or False\r\n   */\r\n  validatePassword(password) {\r\n    if (password.length <= 8 || password === '' || /\\s/.test(password) === true) {\r\n      return false;\r\n    } return true;\r\n  },\r\n\r\n  /**\r\n   * comparePassword\r\n   * @param {string} hashPassword\r\n   * @param {string} password\r\n   * @returns {Boolean} return True or False\r\n   */\r\n  comparePassword(hashPassword, password) {\r\n    return bcrypt.compareSync(password, hashPassword);\r\n  },\r\n  /**\r\n   * isValidEmail helper method\r\n   * @param {string} email\r\n   * @returns {Boolean} True or False\r\n   */\r\n  isValidEmail(email) {\r\n    return /\\S+@\\S+\\.\\S+/.test(email);\r\n  },\r\n  /**\r\n   * isEmpty method\r\n   * @param {string, integer} input\r\n   * @returns {Boolean} True or False\r\n   */\r\n  isEmpty(input) {\r\n    if (input === undefined || input === '') {\r\n      return true;\r\n    }\r\n    if (input.replace(/\\s/g, '').length) {\r\n      return false;\r\n    } return true;\r\n  },\r\n\r\n  /**\r\n   * empty helper method\r\n   * @param {string, integer} input\r\n   * @returns {Boolean} True or False\r\n   */\r\n  empty(input) {\r\n    if (input === undefined || input === '') {\r\n      return true;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Generate Token\r\n   * @param {string} id\r\n   * @returns {string} token\r\n   */\r\n  generateToken(id) {\r\n    const token = jwt.sign({\r\n      userId: id\r\n    },\r\n    process.env.SECRET, { expiresIn: '10d' });\r\n    return token;\r\n  }\r\n};\r\n\r\nexport default Helper;\r\n"],"file":"helpers.js"}
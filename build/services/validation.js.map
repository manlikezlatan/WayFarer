{"version":3,"sources":["../../api/services/validation.js"],"names":["saltRounds","salt","bcrypt","genSaltSync","hashPassword","password","hashSync","comparePassword","hashedPassword","compareSync","isValidEmail","email","regEx","test","validatePassword","length","isEmpty","input","undefined","replace","empty","generateUserToken","user_id","is_admin","first_name","last_name","token","jwt","sign","env","secret","expiresIn"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;AAKA,IAAMA,UAAU,GAAG,EAAnB;;AACA,IAAMC,IAAI,GAAGC,mBAAOC,WAAP,CAAmBH,UAAnB,CAAb;;AACA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAAAC,QAAQ;AAAA,SAAIH,mBAAOI,QAAP,CAAgBD,QAAhB,EAA0BJ,IAA1B,CAAJ;AAAA,CAA7B;AAEA;;;;;;;;;;AAMA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAACC,cAAD,EAAiBH,QAAjB,EAA8B;AACpD,SAAOH,mBAAOO,WAAP,CAAmBJ,QAAnB,EAA6BG,cAA7B,CAAP;AACD,CAFD;AAIA;;;;;;;;;AAKA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B,MAAMC,KAAK,GAAG,cAAd;AACA,SAAOA,KAAK,CAACC,IAAN,CAAWF,KAAX,CAAP;AACD,CAHD;AAKA;;;;;;;;;AAKA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,QAAD,EAAc;AACrC,MAAIA,QAAQ,CAACU,MAAT,IAAmB,CAAnB,IAAwBV,QAAQ,KAAK,EAAzC,EAA6C;AAC3C,WAAO,KAAP;AACD;;AAAC,SAAO,IAAP;AACH,CAJD;AAKA;;;;;;;;;AAKA,IAAMW,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,MAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,EAArC,EAAyC;AACvC,WAAO,IAAP;AACD;;AACD,MAAIA,KAAK,CAACE,OAAN,CAAc,KAAd,EAAqB,EAArB,EAAyBJ,MAA7B,EAAqC;AACnC,WAAO,KAAP;AACD;;AAAC,SAAO,IAAP;AACH,CAPD;AASA;;;;;;;;;AAKA,IAAMK,KAAK,GAAG,SAARA,KAAQ,CAACH,KAAD,EAAW;AACvB,MAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,EAArC,EAAyC;AACvC,WAAO,IAAP;AACD;AACF,CAJD;AAMA;;;;;;;;;AAKA,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAACV,KAAD,EAAQW,OAAR,EAAiBC,QAAjB,EAA2BC,UAA3B,EAAuCC,SAAvC,EAAqD;AAC7E,MAAMC,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AACrBjB,IAAAA,KAAK,EAALA,KADqB;AAErBW,IAAAA,OAAO,EAAPA,OAFqB;AAGrBC,IAAAA,QAAQ,EAARA,QAHqB;AAIrBC,IAAAA,UAAU,EAAVA,UAJqB;AAKrBC,IAAAA,SAAS,EAATA;AALqB,GAAT,EAOdI,gBAAIC,MAPU,EAOF;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAPE,CAAd;;AAQA,SAAOL,KAAP;AACD,CAVD","sourcesContent":["import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport env from '../../env';\n/**\n   * Hash Password Method\n   * @param {string} password\n   * @returns {string} returns hashed password\n   */\nconst saltRounds = 10;\nconst salt = bcrypt.genSaltSync(saltRounds);\nconst hashPassword = password => bcrypt.hashSync(password, salt);\n\n/**\n   * comparePassword\n   * @param {string} hashPassword\n   * @param {string} password\n   * @returns {Boolean} return True or False\n   */\nconst comparePassword = (hashedPassword, password) => {\n  return bcrypt.compareSync(password, hashedPassword);\n};\n\n/**\n   * isValidEmail helper method\n   * @param {string} email\n   * @returns {Boolean} True or False\n   */\nconst isValidEmail = (email) => {\n  const regEx = /\\S+@\\S+\\.\\S+/;\n  return regEx.test(email);\n};\n\n/**\n   * validatePassword helper method\n   * @param {string} password\n   * @returns {Boolean} True or False\n   */\nconst validatePassword = (password) => {\n  if (password.length <= 5 || password === '') {\n    return false;\n  } return true;\n};\n/**\n   * isEmpty helper method\n   * @param {string, integer} input\n   * @returns {Boolean} True or False\n   */\nconst isEmpty = (input) => {\n  if (input === undefined || input === '') {\n    return true;\n  }\n  if (input.replace(/\\s/g, '').length) {\n    return false;\n  } return true;\n};\n\n/**\n   * empty helper method\n   * @param {string, integer} input\n   * @returns {Boolean} True or False\n   */\nconst empty = (input) => {\n  if (input === undefined || input === '') {\n    return true;\n  }\n};\n\n/**\n   * Generate Token\n   * @param {string} id\n   * @returns {string} token\n   */\nconst generateUserToken = (email, user_id, is_admin, first_name, last_name) => {\n  const token = jwt.sign({\n    email,\n    user_id,\n    is_admin,\n    first_name,\n    last_name,\n  },\n  env.secret, { expiresIn: '3d' });\n  return token;\n};\n\nexport {\n  hashPassword,\n  comparePassword,\n  isValidEmail,\n  validatePassword,\n  isEmpty,\n  empty,\n  generateUserToken,\n};"],"file":"validation.js"}